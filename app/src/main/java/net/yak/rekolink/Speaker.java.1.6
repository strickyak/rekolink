package net.yak.rekolink;

import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.util.Log;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.SocketException;

/**
 * Created by strick on 4/29/18.
 */

public class Speaker extends StoppableThread {

    private Config config;
    private Etc etc;

    public Speaker(Etc etc) {
        super("<Speaker>");
        this.etc = etc;
        this.config = etc.config;
    }

    @Override public void start() {
        startPlayer();
        super.start();
    }
    @Override
    public void step() {
        stepPlayer();
    }

    @Override
    public void shutdown() {
        stopPlayer();
    }

    // private

    private AudioTrack track = null; // only track
    private DatagramPacket packet;
    private short[] pcmFrame = new short[AudioParams.FRAME_SIZE];
    private byte[] encodedFrame;
    private byte[] encodedPayload;

    private void startPlayer() {
        encodedFrame = new byte[AudioParams.FRAME_SIZE + RekoPacket.OVERHEAD];
        encodedPayload = new byte[AudioParams.FRAME_SIZE];
        packet = new DatagramPacket(encodedFrame, encodedFrame.length);

        track = new AudioTrack(
                AudioManager.STREAM_VOICE_CALL,
                AudioParams.SAMPLE_RATE,
                AudioFormat.CHANNEL_CONFIGURATION_MONO,
                AudioParams.ENCODING_PCM_NUM_BITS,
                AudioParams.TRACK_BUFFER_SIZE,
                AudioTrack.MODE_STREAM);

        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_URGENT_AUDIO);
    }

    private void stopPlayer() {
        if (track != null) {
            track.stop();
            track.release();
            track = null;
        }
        encodedFrame = null;
        encodedPayload = null;
        packet = null;
    }

    private void stepPlayer() {
        try {
            // TODO: prevent double playback on "hangup"
//            if (track != null) {
//                track.stop();   /// WHY WAS THIS HERE?
//            }

            Log.e("PTT", "Player receive..." + etc.socket.getLocalAddress() + "@" + etc.socket.getLocalPort());
            while (true) {
                try {
                    etc.socket.receive(packet);
                    break;
                } catch (java.net.SocketTimeoutException timeout) {
                    // Log.e("PTT", "(Player Timeout)");
                    return; /// WHY WAS THIS continue;
                }
            }
            RekoPacket rp = new RekoPacket(packet);
            Log.e("PTT", "Player RekoPacket!");

            if (false) if (rp.callsign == config.callsign) return;

            track.play();

            Log.d("Player", "RekoPacket sender: " + packet.getAddress().getHostAddress() +
                    " RekoPacket port: " + packet.getPort() + " RekoPacket length: " + packet.getLength());
            // Decode audio

            for (int i = 0; i < AudioParams.FRAME_SIZE; i++) {
                encodedPayload[i] = encodedFrame[RekoPacket.OVERHEAD + i];
//                encodedPayload[i] = (byte)( (i % 20) * 10);     // HACK 500 Hz YAK
            }

            Mulaw.decode(encodedFrame, pcmFrame);
            track.write(pcmFrame, 0, AudioParams.FRAME_SIZE);
        } catch (SocketException e) {
            // this may be expected
            Log.e("PTT", "Player Socket Exception: " + e.getMessage());
        } catch (IOException e) {
            Log.e("PTT", "Player IOEx: " + e);
            e.printStackTrace();
        }
    }
}
