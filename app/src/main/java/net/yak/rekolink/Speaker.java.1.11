package net.yak.rekolink;

import android.media.AudioAttributes;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.os.Build;
import android.util.Log;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.SocketException;

import static android.media.AudioFormat.CHANNEL_OUT_FRONT_CENTER;
import static android.media.AudioFormat.ENCODING_PCM_16BIT;
import static android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
import static android.media.AudioTrack.WRITE_BLOCKING;
import static android.media.AudioTrack.WRITE_NON_BLOCKING;
import static net.yak.rekolink.RekoPacket.OVERHEAD;

/**
 * Created by strick on 4/29/18.
 */

public class Speaker extends StoppableThread {

    private Config config;
    private Etc etc;
    private JitterBuffer jitterBuffer;

    public Speaker(Etc etc, JitterBuffer jb) {
        super("<Speaker>");
        this.etc = etc;
        this.config = etc.config;
        this.jitterBuffer = jb;
    }

    @Override public void start() {
        startPlayer();
        super.start();
    }
    @Override
    public void step() {
        stepPlayer();
    }

    @Override
    public void shutdown() {
        stopPlayer();
    }

    // private

    private AudioTrack track = null; // only track
    private DatagramPacket packet;
    private short[] pcmFrame = new short[AudioParams.FRAME_SIZE];
    private byte[] encodedFrame;

    private void startPlayer() {
        encodedFrame = new byte[AudioParams.FRAME_SIZE + OVERHEAD];
        packet = new DatagramPacket(encodedFrame, encodedFrame.length);

        int streamType = AudioParams.STREAM_TYPE;

        track = new AudioTrack(
                streamType,
                AudioParams.SAMPLE_RATE,
                AudioFormat.CHANNEL_OUT_MONO, // AudioFormat.CHANNEL_CONFIGURATION_MONO,
                ENCODING_PCM_16BIT, // AudioParams.ENCODING_PCM_NUM_BITS,
                AudioParams.TRACK_BUFFER_SIZE * 4,
                AudioTrack.MODE_STREAM);

//        AudioManager am = etc.context.getSystemService(AudioManager.class);
//        int sess = am.generateAudioSessionId();
//
//        AudioFormat af = new AudioFormat.Builder()
//                .setSampleRate(8000)
//                .setEncoding(ENCODING_PCM_16BIT)
//                //.setChannelMask(CHANNEL_OUT_FRONT_CENTER)
//                .build();
//
//        int bufsz = AudioParams.TRACK_BUFFER_SIZE;
//
//        track = new AudioTrack(
//                new AudioAttributes.Builder()
//                        .setUsage(AudioAttributes.USAGE_VOICE_COMMUNICATION)
//                        .setContentType(AudioAttributes.CONTENT_TYPE_SPEECH)
//                        .build(),
//                af, bufsz, AudioTrack.MODE_STREAM, sess);

        AudioManager am = etc.context.getSystemService(AudioManager.class);
        int max = am.getStreamMaxVolume(streamType);
        am.setStreamVolume(streamType, max*86/100, 0);

        am.requestAudioFocus(new AudioManager.OnAudioFocusChangeListener() {
            @Override
            public void onAudioFocusChange(int i) {
                // TODO
            }
        }, streamType, AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);

        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_URGENT_AUDIO);


//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            track.setVolume(1.0f);
//        }

        track.play();
    }

    private void stopPlayer() {
        if (track != null) {
            track.stop();
            track.release();
            track = null;
        }
        encodedFrame = null;
//        encodedPayload = null;
        packet = null;
    }

    private void stepPlayer() {
        short[] audio = jitterBuffer.Take(100);
        if (audio != null) {
            track.write(audio, 0, audio.length, WRITE_BLOCKING);
        }
        //etc.sleep(1);
    }

    private void OLDstepPlayer() {
        try {
            while (true) {
                try {
                    etc.socket.receive(packet);
                    break;
                } catch (java.net.SocketTimeoutException timeout) {
                    return;
                }
            }
            RekoPacket rp = new RekoPacket(packet);

            if (false) if (rp.callsign == config.callsign) return;

//            for (int i = 0; i < AudioParams.FRAME_SIZE; i++) {
//                encodedPayload[i] = encodedFrame[RekoPacket.OVERHEAD + i];
//            }

            Mulaw.decode(OVERHEAD, rp.len - OVERHEAD, encodedFrame, pcmFrame);
            track.write(pcmFrame, 0, AudioParams.FRAME_SIZE, WRITE_BLOCKING);

        } catch (SocketException e) {
            // this may be expected
            Log.e("PTT", "Player Socket Exception: " + e.getMessage());
        } catch (IOException e) {
            Log.e("PTT", "Player IOEx: " + e);
            e.printStackTrace();
        }
    }
}
